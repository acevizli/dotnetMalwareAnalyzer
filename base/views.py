from django.http.response import HttpResponse
from django.shortcuts import render
import os
import re
import subprocess
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework import status
import json
from .models import Malware, ClassCode, EntropySection

# Create your views here.
@api_view(["POST"])
def Analyzer(request):
    data = json.loads(request.body.decode("utf-8"))
    folder = data["folder"]
    dotnets = []
    files = [f for f in os.listdir(folder) if f.endswith(".exe")]
    print("------------------------------------------------------------------")
    for file in files:
        stream = os.popen(".\\Scripts\\diec.exe -d {}".format(folder + "\\" + file))
        output = stream.readlines()
        for o in output:
            print(o, end="")
            if "library: .NET" in o:
                dotnets.append(file)
        os.popen(".\\Scripts\\diec.exe -e {}".format(folder + "\\" + file))
        print("------------------------------------------------------------------\n")
    for dotnet in dotnets:
        malware = Malware.objects.create(name=dotnet)
        stream = os.popen(".\\Scripts\\diec.exe -e {}".format(folder + "\\" + file))
        output = stream.readlines()
        print(dotnet)
        for line in output[1:]:
            print(line)
            entropy = line.split("|")
            EntropySection.objects.create(
                malware=malware,
                name=entropy[1],
                offset=entropy[2],
                size=entropy[3],
                entropy=float(entropy[4].split(" ")[0][:-1]),
                status=entropy[4].split(" ")[1],
            )
        proc = subprocess.Popen(
            ["powershell", ".\Scripts\Demo.ps1 {}".format(folder + "\\" + dotnet)],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        lines = proc.stdout.read().decode("utf-8")
        classes = re.split("@class@", lines)
        for c in classes:
            ClassCode.objects.create(malware=malware, code=c)
    return Response(status=status.HTTP_200_OK)


import shutil


@api_view(["GET"])
def GenerateDotnet(request):
    source = ClassCode.objects.all()[0]
    source2 = ClassCode.objects.all()[1]
    sourceCode = source.code
    sourceCode2 = source2.code
    path = ".\\Scripts\\DotnetProject"
    if os.path.exists(path):
        shutil.rmtree(path)
    os.makedirs(path)
    command = "dotnet new console"
    proc = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, cwd=path)
    proc.communicate()
    f = open(os.path.join(path, "source1.cs"), "a")
    f.write(sourceCode)
    f.close()
    os.remove(os.path.join(path, "Program.cs"))
    f = open(os.path.join(path, "source2.cs"), "a")
    f.write(sourceCode2)
    f.close()
    command = "dotnet build"
    proc = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, cwd=path)
    proc.communicate()
    return Response(status=status.HTTP_200_OK)
