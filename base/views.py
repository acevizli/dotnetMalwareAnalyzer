from django.http.response import HttpResponse
from django.shortcuts import render
import os
import re
import subprocess
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework import status
import json
from .models import ClassCode

# Create your views here.
"""
@api_view(["POST"])
def Analyzer(request):
    data = json.loads(request.body.decode("utf-8"))
    folder = data["folder"]
    dotnets = []
    files = [f for f in os.listdir(folder) if f.endswith(".exe")]
    print("------------------------------------------------------------------")
    for file in files:
        stream = os.popen(".\\Scripts\\diec.exe -d {}".format(folder + "\\" + file))
        output = stream.readlines()
        for o in output:
            print(o, end="")
            if "library: .NET" in o:
                dotnets.append(file)
        os.popen(".\\Scripts\\diec.exe -e {}".format(folder + "\\" + file))
        print("------------------------------------------------------------------\n")
    for dotnet in dotnets:
        malware = Malware.objects.create(name=dotnet)
        stream = os.popen(".\\Scripts\\diec.exe -e {}".format(folder + "\\" + file))
        output = stream.readlines()
        print(dotnet)
        for line in output[1:]:
            print(line)
            entropy = line.split("|")
            EntropySection.objects.create(
                malware=malware,
                name=entropy[1],
                offset=entropy[2],
                size=entropy[3],
                entropy=float(entropy[4].split(" ")[0][:-1]),
                status=entropy[4].split(" ")[1],
            )
        proc = subprocess.Popen(
            ["powershell", ".\Scripts\Demo.ps1 {}".format(folder + "\\" + dotnet)],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        lines = proc.stdout.read().decode("utf-8")
        classes = re.split("@class@", lines)
        for c in classes:
            ClassCode.objects.create(malware=malware, code=c)
    return Response(status=status.HTTP_200_OK)
"""

import shutil

MainTemplate = "namespace ENS491\n{\n\tclass Program\n\t{\n\t\tstatic void Main(string[] args)\n\t\t{"

nuget = '<?xml version="1.0" encoding="utf-8"?>\n<configuration>\n\t<packageSources>\n\t\t<add key="nuget" value="https://api.nuget.org/v3/index.json" />\n\t\t</packageSources>\n</configuration>'
import random


@api_view(["POST"])
def GenerateDotnet(request):
    sources = []
    data = request.data
    print(data)
    for module in data["modules"]:
        source = ClassCode.objects.filter(type=module["type"])
        sources.append(source[random.randint(0, len(source) - 1)])
        print(source[0].packageDependincies.all())
    path = ".\\Scripts\\DotnetProject"
    if os.path.exists(path):
        shutil.rmtree(path)
    os.makedirs(path)
    command = "dotnet new console"
    proc = subprocess.Popen(
        command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=path
    )
    proc.communicate()
    os.remove(os.path.join(path, "Program.cs"))
    f = open(os.path.join(path, "Program.cs"), "a")
    f.write(MainTemplate)
    f3 = open(os.path.join(path, "nuget.config"), "a")
    f3.write(nuget)
    f3.close()
    i = 1
    for source in sources:
        f2 = open(os.path.join(path, "source{}.cs".format(i)), "a")
        f2.write(source.code)
        f2.close()
        i += 1
        f.write("\n\t\t\t" + source.MainCaller)
        for package in source.packageDependincies.all():
            proc = subprocess.Popen(
                "dotnet add package {}".format(package.package),
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                cwd=path,
            )
            proc.communicate()

    f.write("\n\t\t}\n\t}\n}")
    f.close()
    command = "dotnet build"
    proc = subprocess.Popen(
        command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=path
    )
    proc.communicate()
    malware_path = os.path.join(path, "bin\\Debug\\net5.0")
    shutil.make_archive("malware", "zip", malware_path)
    zip_file = open("malware.zip", "rb")

    response = HttpResponse(zip_file, content_type="application/force-download")
    response["Content-Disposition"] = "attachment; filename=%s" % "malware.zip"

    return response
