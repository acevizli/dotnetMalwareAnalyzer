import React, { useState, useEffect } from "react";
import {
  InputGroup,
  Container,
  Form,
  Button,
  FormControl,
  Alert,
  Col,
  Row,
} from "react-bootstrap";
import axios from "axios";
import ModuleCard from "../components/ModuleCard";
import Loading from "../components/Loading";
import { useCartContext } from "../context/cartContext";

function GeneratorScreen() {
  const [error, setError] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [obfuscator, setObfuscator] = useState("");
  const [method, setMethod] = useState("");
  const [dotnet, setDotnet] = useState("");
  const [modules, setModules] = useState([]);
  const [loading, setLoading] = useState(false);
  const { cart } = useCartContext();

  useEffect(() => {
    async function fetchModules() {
      setLoading(true);
      const { data } = await axios.get("/api/modules");
      setModules(data);
      setLoading(false);
    }
    fetchModules();
  }, []);

  const submitHandler = async (e) => {
    e.preventDefault();
    const modules = [];
    cart.forEach(myFunction);

    function myFunction(item) {
      const j = { id: item.id };
      modules.push(j);
    }
    const json = { modules: modules, obfuscator: obfuscator, method: method };
    console.log(json);
    setLoading(true);
    axios
      .post("api/generate/" + dotnet, json, {
        responseType: "arraybuffer",
        headers: {
          "Content-Type": "application/json",
        },
      })
      .then((response) => {
        const type = response.headers["content-type"];
        const blob = new Blob([response.data], {
          type: type,
          encoding: "UTF-8",
        });
        const link = document.createElement("a");
        link.href = window.URL.createObjectURL(blob);
        link.download = response.headers["content-disposition"]
          .split("filename=")[1]
          .split(";")[0]
          .slice(1, -1);
        link.click();
        setError(false);
      })
      .catch((error) => {
        setError(true);
        setErrorMessage(error.message);
      });
    setLoading(false);
  };
  return (
    <div>
      {loading ? (
        <Loading />
      ) : (
        <div>
          <Row>
            {modules.map((module) => (
              <Col key={module.id} sm={12} md={6} lg={4}>
                <ModuleCard
                  module={module}
                  raised
                  className="module-main-card"
                />
              </Col>
            ))}
          </Row>
          <Form onSubmit={submitHandler}>
            {error && <Alert variant="danger">{errorMessage}</Alert>}
            <Container>
              <InputGroup className="mb-3">
                <InputGroup.Text id="basic-addon2">
                  example: Eazfuscator\Eazfuscator.NET.exe
                </InputGroup.Text>
                <FormControl
                  placeholder="obfuscator"
                  aria-label="obfuscator"
                  aria-describedby="basic-addon2"
                  value={obfuscator}
                  onChange={(e) => setObfuscator(e.target.value)}
                />
              </InputGroup>
              <InputGroup className="mb-3">
                <InputGroup.Text id="basic-addon2">
                  example: vba
                </InputGroup.Text>
                <FormControl
                  placeholder="method"
                  aria-label="method"
                  aria-describedby="basic-addon2"
                  value={method}
                  onChange={(e) => setMethod(e.target.value)}
                />
              </InputGroup>
              <InputGroup className="mb-3">
                <InputGroup.Text id="basic-addon2">
                  dotnet48 or dotnet5
                </InputGroup.Text>
                <FormControl
                  placeholder="dotnet"
                  aria-label="dotnet"
                  aria-describedby="basic-addon2"
                  value={dotnet}
                  onChange={(e) => setDotnet(e.target.value)}
                />
              </InputGroup>
            </Container>

            <Button type="submit" variant="primary">
              Generate
            </Button>
          </Form>
        </div>
      )}
    </div>
  );
}

export default GeneratorScreen;
