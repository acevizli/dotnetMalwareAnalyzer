{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033\deflangfe1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Helvetica;}{\f1\fmodern\fprq1\fcharset0 Consolas;}{\f2\fswiss\fprq2\fcharset0 Verdana;}{\f3\fnil\fcharset2 Symbol;}}
{\colortbl ;\red0\green0\blue0;\red51\green51\blue51;\red0\green0\blue255;\red65\green131\blue196;\red248\green248\blue248;\red255\green255\blue255;}
{\*\generator Riched20 6.2.9200}{\*\mmathPr\mnaryLim0\mdispDef1\mwrapIndent1440 }\viewkind4\uc1 
\pard\cbpat6\widctlpar\sa150\cf1\kerning36\b\f0\fs42 Description\par

\pard\cbpat6\widctlpar\sb150\sa225\cf2\kerning0\b0\fs21 de4dot is an open source (GPLv3) .NET deobfuscator and unpacker written in C#. It will try its best to restore a packed and obfuscated assembly to almost the original assembly. Most of the obfuscation can be completely restored (e.g. string encryption), but symbol renaming is impossible to restore since the original names aren't (usually) part of the obfuscated assembly.\par

\pard\cbpat6\widctlpar It uses\~{{\field{\*\fldinst{HYPERLINK "https://github.com/0xd4d/dnlib/"}}{\fldrslt{\ul\cf3\cf4 dnlib}}}}\f0\fs21\~to read and write assemblies so make sure you get it or it won't compile.\par

\pard\cbpat6\widctlpar\sb300\sa150\cf1\kerning36\b\fs42 Features\par

\pard\cbpat6\widctlpar\sb150\sa225\cf2\kerning0\b0\fs21 Here's a pseudo random list of the things it will do depending on what obfuscator was used to obfuscate an assembly:\par

\pard\cbpat6{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent1080{\pntxtb\'B7}}\widctlpar\fi-360 Inline methods. Some obfuscators move small parts of a method to another static method and calls it.\par
{\pntext\f3\'B7\tab}Decrypt strings statically or dynamically\par
{\pntext\f3\'B7\tab}Decrypt other constants. Some obfuscators can also encrypt other constants, such as all integers, all doubles, etc.\par
{\pntext\f3\'B7\tab}Decrypt methods statically or dynamically\par
{\pntext\f3\'B7\tab}Remove proxy methods. Many obfuscators replace most/all call instructions with a call to a delegate. This delegate in turn calls the real method.\par
{\pntext\f3\'B7\tab}Rename symbols. Even though most symbols can't be restored, it will rename them to human readable strings. Sometimes, some of the original names can be restored, though.\par
{\pntext\f3\'B7\tab}Devirtualize virtualized code\par
{\pntext\f3\'B7\tab}Decrypt resources. Many obfuscators have an option to encrypt .NET resources.\par
{\pntext\f3\'B7\tab}Decrypt embedded files. Many obfuscators have an option to embed and possibly encrypt/compress other assemblies.\par
{\pntext\f3\'B7\tab}Remove tamper detection code\par
{\pntext\f3\'B7\tab}Remove anti-debug code\par
{\pntext\f3\'B7\tab}Control flow deobfuscation. Many obfuscators modify the IL code so it looks like spaghetti code making it very difficult to understand the code.\par
{\pntext\f3\'B7\tab}Restore class fields. Some obfuscators can move fields from one class to some other obfuscator created class.\par
{\pntext\f3\'B7\tab}Convert a PE exe to a .NET exe. Some obfuscators wrap a .NET assembly inside a Win32 PE so a .NET decompiler can't read the file.\par
{\pntext\f3\'B7\tab}Removes most/all junk classes added by the obfuscator.\par
{\pntext\f3\'B7\tab}Fixes some peverify errors. Many of the obfuscators are buggy and create unverifiable code by mistake.\par
{\pntext\f3\'B7\tab}Restore the types of method parameters and fields\par

\pard\cbpat6\widctlpar\sb300\sa150\cf1\kerning36\b\fs42 Supported obfuscators/packers\par

\pard\cbpat6{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent1080{\pntxtb\'B7}}\widctlpar\fi-360\cf2\kerning0\b0\fs21 Agile.NET (aka CliSecure)\par
{\pntext\f3\'B7\tab}Babel.NET\par
{\pntext\f3\'B7\tab}CodeFort\par
{\pntext\f3\'B7\tab}CodeVeil\par
{\pntext\f3\'B7\tab}CodeWall\par
{\pntext\f3\'B7\tab}CryptoObfuscator\par
{\pntext\f3\'B7\tab}DeepSea Obfuscator\par
{\pntext\f3\'B7\tab}Dotfuscator\par
{\pntext\f3\'B7\tab}.NET Reactor\par
{\pntext\f3\'B7\tab}Eazfuscator.NET\par
{\pntext\f3\'B7\tab}Goliath.NET\par
{\pntext\f3\'B7\tab}ILProtector\par
{\pntext\f3\'B7\tab}MaxtoCode\par
{\pntext\f3\'B7\tab}MPRESS\par
{\pntext\f3\'B7\tab}Rummage\par
{\pntext\f3\'B7\tab}Skater.NET\par
{\pntext\f3\'B7\tab}SmartAssembly\par
{\pntext\f3\'B7\tab}Spices.Net\par
{\pntext\f3\'B7\tab}Xenocode\par

\pard\cbpat6\widctlpar\sb225\sa225 Some of the above obfuscators are rarely used (e.g. Goliath.NET), so they have had much less testing. Help me out by reporting bugs or problems you find.\par

\pard\cbpat6\widctlpar\sb300\sa150\cf1\kerning36\b\fs42 Warning\par

\pard\cbpat6\widctlpar\sb150\sa225\cf2\kerning0\b0\fs21 Sometimes the obfuscated assembly and all its dependencies are loaded into memory for execution. Use a safe sandbox environment if you suspect the assembly or assemblies to be malware.\par

\pard\cbpat6\widctlpar\sb225\sa225 Even if the current version of de4dot doesn't load a certain assembly into memory for execution, a future version might.\par

\pard\cbpat6\widctlpar\sb300\sa150\cf1\kerning36\b\fs42 How to use de4dot\par

\pard\brdrb\brdrs\brdrw15 \cbpat6\widctlpar\sb300\sa150\kerning0\fs36 N00b users\par

\pard\cbpat6\widctlpar\sb150\sa225\cf2\b0\fs21 Drag and drop the file(s) onto de4dot.exe and wait a few seconds.\par

\pard\brdrb\brdrs\brdrw15 \cbpat6\widctlpar\sb300\sa150\cf1\b\fs36 Deobfuscate more than one file at a time\par

\pard\cbpat6\widctlpar\sb150\sa225\cf2\b0\fs21 When more than one assembly has been obfuscated, it's very likely that you must deobfuscate them all at the same time unless you disable symbol renaming. The reason is that if assembly A has a reference to class C in assembly B, and you rename symbols only in assembly B, then class C could be renamed to e.g. Class0 but the reference in assembly \i A\i0  still references a class called C in assembly B. If you deobfuscate both assemblies at the same time, all references will also be updated.\par

\pard\brdrb\brdrs\brdrw15 \cbpat6\widctlpar\sb300\sa150\cf1\b\fs36 Find all obfuscated files and deobfuscate them\par

\pard\cbpat6\widctlpar\cf2\b0\fs21 The following command line will deobfuscate all assemblies that have been obfuscated by a supported obfuscator and save the assemblies to \highlight5\f1\fs18 c:\\output\highlight0\f0\fs21\par

\pard\brdrl\brdrs\brdrw15\brsp160 \brdrt\brdrs\brdrw15\brsp100 \brdrr\brdrs\brdrw15\brsp160 \brdrb\brdrs\brdrw15\brsp100 \widctlpar\sl285\slmult0\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs18 de4dot -r c:\\input -ru -ro c:\\output\par

\pard\cbpat6\widctlpar\highlight5 -r\highlight0\f0\fs21\~means recursive search.\~\highlight5\f1\fs18 -ru\highlight0\f0\fs21\~means it should ignore unknown files.\~\highlight5\f1\fs18 -ro\highlight0\f0\fs21\~means it should place the output files in the following directory. Typically, you'd first copy\~\highlight5\f1\fs18 c:\\input\highlight0\f0\fs21\~to\~\highlight5\f1\fs18 c:\\output\highlight0\f0\fs21 , and then run the command. That way all the files will be in\~\highlight5\f1\fs18 c:\\output\highlight0\f0\fs21 , even non-assemblies and non-processed assemblies. When de4dot is finished, you'd just double click the main assembly in\~\highlight5\f1\fs18 c:\\output\highlight0\f0\fs21\~and it should hopefully start.\par

\pard\brdrb\brdrs\brdrw15 \cbpat6\widctlpar\sb300\sa150\cf1\b\fs36 Detect obfuscator\par

\pard\cbpat6\widctlpar\cf2\b0\fs21 Use the\~\highlight5\f1\fs18 -d\highlight0\f0\fs21\~option to detect the obfuscator without deobfuscating any assembly.\par

\pard\cbpat6\widctlpar\sb225\sa225 Find all .NET assemblies and detect obfuscator. If it's an unsupported obfuscator or if it's not obfuscated, it will print "Unknown obfuscator".\par

\pard\brdrl\brdrs\brdrw15\brsp160 \brdrt\brdrs\brdrw15\brsp100 \brdrr\brdrs\brdrw15\brsp160 \brdrb\brdrs\brdrw15\brsp100 \widctlpar\sl285\slmult0\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs18 de4dot -d -r c:\\input\par

\pard\cbpat6\widctlpar\sb225\sa225\f0\fs21 Same as above except that it will only show which files have been obfuscated by a supported obfuscator.\par

\pard\brdrl\brdrs\brdrw15\brsp160 \brdrt\brdrs\brdrw15\brsp100 \brdrr\brdrs\brdrw15\brsp160 \brdrb\brdrs\brdrw15\brsp100 \widctlpar\sl285\slmult0\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs18 de4dot -d -r c:\\input -ru\par

\pard\cbpat6\widctlpar\sb225\sa225\f0\fs21 Detect obfuscator\par

\pard\brdrl\brdrs\brdrw15\brsp160 \brdrt\brdrs\brdrw15\brsp100 \brdrr\brdrs\brdrw15\brsp160 \brdrb\brdrs\brdrw15\brsp100 \widctlpar\sl285\slmult0\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs18 de4dot -d file1.dll file2.dll file3.dll\par

\pard\brdrb\brdrs\brdrw15 \cbpat6\widctlpar\sb300\sa150\cf1\b\f0\fs36 Preserving metadata tokens\par

\pard\cbpat6\widctlpar\cf2\b0\fs21 Sometimes in rare cases, you'd want to preserve the metadata tokens. Use\~\highlight5\f1\fs18 --preserve-tokens\highlight0\f0\fs21\~or\~\highlight5\f1\fs18 --preserve-table\highlight0\f0\fs21 . Also consider using\highlight5\f1\fs18 --keep-types\highlight0\f0\fs21\~since it won't remove any types and methods added by the obfuscator. Another useful option is\~\highlight5\f1\fs18 --dont-create-params\highlight0\f0\fs21 . If used, the renamer won't create Param rows for method parameters that don't have a Param row. That way the ParamPtr table won't be added to your assemblies. Peverify has a bug and doesn't support it (you'll see lots of "errors").\par
The #Strings, #US and #Blob heaps can also be preserved by using\~\highlight5\f1\fs18 --preserve-strings\highlight0\f0\fs21 ,\~\highlight5\f1\fs18 --preserve-us\highlight0\f0\fs21 , and\~\highlight5\f1\fs18 --preserve-blob\highlight0\f0\fs21\~respectively. Of these three,\~\highlight5\f1\fs18 --preserve-us\highlight0\f0\fs21\~is the most useful one since\~\highlight5\f1\fs18 ldstr\highlight0\f0\fs21\~instruction and\~\highlight5\f1\fs18 module.ResolveString()\highlight0\f0\fs21\~directly reference the #US heap.\par
\highlight5\f1\fs18 --preserve-sig-data\highlight0\f0\fs21\~should be used if the obfuscator adds extra data at the end of signatures that it uses for its own purpose, e.g. as decryption keys. Confuser is one obfuscator that does this.\par
\highlight5\f1\fs18 --preserve-tokens\highlight0\f0\fs21\~preserves all important tokens but will also enable\~\highlight5\f1\fs18 --preserve-us\highlight0\f0\fs21 ,\~\highlight5\f1\fs18 --preserve-blob\highlight0\f0\fs21\~and\~\highlight5\f1\fs18 --preserve-sig-data\highlight0\f0\fs21 .\par
If it's detected as an unknown (unsupported) obfuscator (or if you force it with\~\highlight5\f1\fs18 -p un\highlight0\f0\fs21 ), all tokens are preserved, including the #US heap and any extra data at the end of signatures. Also, no obfuscator types, fields or methods are removed.\par

\pard\cbpat6\widctlpar\sb225\sa225 Preserve all important tokens, #US, #Blob, extra sig data.\par

\pard\brdrl\brdrs\brdrw15\brsp160 \brdrt\brdrs\brdrw15\brsp100 \brdrr\brdrs\brdrw15\brsp160 \brdrb\brdrs\brdrw15\brsp100 \widctlpar\sl285\slmult0\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs18 de4dot --preserve-tokens file1.dll\par

\pard\cbpat6\widctlpar\sb225\sa225\f0\fs21 Preserve all important tokens, #US, #Blob, extra sig data and don't remove types/fields added by the obfuscator\par

\pard\brdrl\brdrs\brdrw15\brsp160 \brdrt\brdrs\brdrw15\brsp100 \brdrr\brdrs\brdrw15\brsp160 \brdrb\brdrs\brdrw15\brsp100 \widctlpar\sl285\slmult0\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs18 de4dot --keep-types --preserve-tokens file1.dll\par

\pard\cbpat6\widctlpar\sb225\sa225\f0\fs21 Preserve all important tokens, #US, #Blob, extra sig data and don't create extra Param rows to prevent the ParamPtr table from being created.\par

\pard\brdrl\brdrs\brdrw15\brsp160 \brdrt\brdrs\brdrw15\brsp100 \brdrr\brdrs\brdrw15\brsp160 \brdrb\brdrs\brdrw15\brsp100 \widctlpar\sl285\slmult0\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs18 de4dot --dont-create-params --preserve-tokens file1.dll\par

\pard\cbpat6\widctlpar\sb225\sa225\f0\fs21 Preserve all important tokens except the Param tokens.\par

\pard\brdrl\brdrs\brdrw15\brsp160 \brdrt\brdrs\brdrw15\brsp100 \brdrr\brdrs\brdrw15\brsp160 \brdrb\brdrs\brdrw15\brsp100 \widctlpar\sl285\slmult0\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs18 de4dot --preserve-table all,-pd file1.dll\par

\pard\brdrb\brdrs\brdrw15 \cbpat6\widctlpar\sb300\sa150\cf1\b\f0\fs36 Dynamically decrypting strings\par

\pard\cbpat6\widctlpar\cf2\b0\fs21 Although\~\highlight5\f1\fs18 de4dot\highlight0\f0\fs21\~supports a lot of obfuscators, there's still some it doesn't support. To decrypt strings, you'll first need to figure out which method or methods decrypt strings. To get the method token of these string decrypters, you can use ILDASM with the 'show metadata tokens' option enabled. A method token is a 32-bit number and begins with 06, e.g. 06012345.\par
This command will load assembly file1.dll into memory by calling\~\highlight5\f1\fs18 Assembly.Load()\highlight0\f0\fs21 . When it detects calls to the two string decrypters (06012345 and 060ABCDE), it will call them by creating a dynamic method, and save the result (the decrypted string). The call to the string decrypter will be removed and the decrypted string will be in its place.\par

\pard\brdrl\brdrs\brdrw15\brsp160 \brdrt\brdrs\brdrw15\brsp100 \brdrr\brdrs\brdrw15\brsp160 \brdrb\brdrs\brdrw15\brsp100 \widctlpar\sl285\slmult0\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs18 de4dot file1.dll --strtyp delegate --strtok 06012345 --strtok 060ABCDE\par

\pard\cbpat6\widctlpar\sb225\sa225\f0\fs21 Since the assembly is loaded and executed, make sure you run this in a sandbox if you suspect the file to be malware.\par

\pard\brdrb\brdrs\brdrw15 \cbpat6\widctlpar\sb300\sa150\cf1\b\fs36 Forcing detection of a certain obfuscator\par

\pard\cbpat6\widctlpar\cf2\highlight5\b0\f1\fs18 de4dot\highlight0\f0\fs21\~isn't perfect. If it fails to detect an obfuscator, you can use the\~\highlight5\f1\fs18 -p\highlight0\f0\fs21\~option to force it to assume it's been obfuscated by it.\par

\pard\cbpat6\widctlpar\sb225\sa225 Force SmartAssembly\par

\pard\brdrl\brdrs\brdrw15\brsp160 \brdrt\brdrs\brdrw15\brsp100 \brdrr\brdrs\brdrw15\brsp160 \brdrb\brdrs\brdrw15\brsp100 \widctlpar\sl285\slmult0\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs18 de4dot file1.dll -p sa\par

\pard\cbpat6\widctlpar\sb225\sa225\f0\fs21 Force unsupported obfuscator\par

\pard\brdrl\brdrs\brdrw15\brsp160 \brdrt\brdrs\brdrw15\brsp100 \brdrr\brdrs\brdrw15\brsp160 \brdrb\brdrs\brdrw15\brsp100 \widctlpar\sl285\slmult0\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs18 de4dot file1.dll -p un\par

\pard\cbpat6\widctlpar\sb225\sa225\f0\fs21 For other obfuscator types, see the help screen.\par

\pard\brdrb\brdrs\brdrw15 \cbpat6\widctlpar\sb300\sa150\cf1\b\fs36 Disabling symbol renaming\par

\pard\cbpat6\widctlpar\cf2\b0\fs21 Renaming symbols isn't as easy as renaming A to B when reflection is involved.\~\highlight5\f1\fs18 de4dot\highlight0\f0\fs21\~currently doesn't support renaming XAML so if you suspect that it uses WPF (or if it's a Silverlight app) you should disable renaming if the assembly fails to run.\par

\pard\brdrl\brdrs\brdrw15\brsp160 \brdrt\brdrs\brdrw15\brsp100 \brdrr\brdrs\brdrw15\brsp160 \brdrb\brdrs\brdrw15\brsp100 \widctlpar\sl285\slmult0\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs18 de4dot --dont-rename file1.dll file2.dll\par

\pard\cbpat6\widctlpar\highlight5 --keep-names\highlight0\f0\fs21\~can also be used to tell\~\highlight5\f1\fs18 de4dot\highlight0\f0\fs21\~not to rename certain symbols, e.g. "don't rename fields".\par

\pard\cbpat6\widctlpar\sb225\sa225 Rename everything that should be renamed except properties, events and methods.\par

\pard\brdrl\brdrs\brdrw15\brsp160 \brdrt\brdrs\brdrw15\brsp100 \brdrr\brdrs\brdrw15\brsp160 \brdrb\brdrs\brdrw15\brsp100 \widctlpar\sl285\slmult0\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs18 de4dot --keep-names pem file1.dll\par

\pard\brdrb\brdrs\brdrw15 \cbpat6\widctlpar\sb300\sa150\cf1\b\f0\fs36 Using a different rename regex\par

\pard\cbpat6\widctlpar\cf2\b0\fs21 The default regexes should be enough, except possibly the one that is used when an unsupported obfuscator is detected. To see all default regexes, start\~\highlight5\f1\fs18 de4dot\highlight0\f0\fs21\~without any arguments and it will list all options and all default values.\par

\pard\cbpat6\widctlpar\sb225\sa225 Eg., currently the following is the default regex used when Dotfuscator is detected\par

\pard\brdrl\brdrs\brdrw15\brsp160 \brdrt\brdrs\brdrw15\brsp100 \brdrr\brdrs\brdrw15\brsp160 \brdrb\brdrs\brdrw15\brsp100 \widctlpar\sl285\slmult0\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs18 !^[a-z][a-z0-9]\{0,2\}$&!^A_[0-9]+$&^[\\u2E80-\\u9FFFa-zA-Z_<\{$][\\u2E80-\\u9FFFa-zA-Z_0-9<>\{\}$.`-]*$\par

\pard\cbpat6\widctlpar\f0\fs21 As you can see, it's not just one regex, it's more than one. Each one is separated by\~\highlight5\f1\fs18 &\highlight0\f0\fs21\~and each regex can be negated by using\~\highlight5\f1\fs18 !\highlight0\f0\fs21\~in front of it. To show it more clearly, these regexes are used:\par

\pard\brdrl\brdrs\brdrw15\brsp160 \brdrt\brdrs\brdrw15\brsp100 \brdrr\brdrs\brdrw15\brsp160 \brdrb\brdrs\brdrw15\brsp100 \widctlpar\sl285\slmult0\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs18 (negated) ^[a-z][a-z0-9]\{0,2\}$\par
(negated) ^A_[0-9]+$\par
^[\\u2E80-\\u9FFFa-zA-Z_<\{$][\\u2E80-\\u9FFFa-zA-Z_0-9<>\{\}$.`-]*$\par

\pard\cbpat6\widctlpar\f0\fs21 To change the regex(es), you must know the short type name of the obfuscator (see help screen). e.g. it's\~\highlight5\f1\fs18 sa\highlight0\f0\fs21\~if it's SmartAssembly, and\~\highlight5\f1\fs18 un\highlight0\f0\fs21\~if it's an unsupported/unknown obfuscator. The option to use is\~\highlight5\f1\fs18 --TYPE-name\highlight0\f0\fs21\~(e.g. \highlight5\f1\fs18 --sa-name\highlight0\f0\fs21\~for SmartAssembly and\~\highlight5\f1\fs18 --un-name\highlight0\f0\fs21\~for unknown/unsupported obfuscators):\par

\pard\brdrl\brdrs\brdrw15\brsp160 \brdrt\brdrs\brdrw15\brsp100 \brdrr\brdrs\brdrw15\brsp160 \brdrb\brdrs\brdrw15\brsp100 \widctlpar\sl285\slmult0\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs18 de4dot --un-name "^[a-zA-Z]\\w*$" file1.dll\par

\pard\brdrb\brdrs\brdrw15 \cbpat6\widctlpar\sb300\sa150\cf1\b\f0\fs36 Other options\par

\pard\cbpat6\widctlpar\cf2\b0\fs21 Start\~\highlight5\f1\fs18 de4dot\highlight0\f0\fs21\~without any arguments and it will show all options.\par

\pard\widctlpar\sa160\sl252\slmult1\cf0\f2\fs22\par
}
 