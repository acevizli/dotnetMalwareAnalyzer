using System;
using System.Security.Cryptography;
using System.IO;

using System.Text;
using System.Threading;
using System.Threading.Tasks;

using RestSharp;
using Newtonsoft.Json;
namespace ENS491
{

    class Communication : Module
    {
        private static string _privateKey;
        private static string _publicKey;
        private static UnicodeEncoding _encoder = new UnicodeEncoding();

        private static readonly string EXP = "AQAB";
        private static readonly string MODULUS = "zf4LgceVPvjMLz/pp8exH58AeBrhjLe0k4FRmd59I0k4sH6oug6Z9RfY4FvEFcssBwH1cmWF5/Zen8xbRVRyUnzer6b6cKmlzHFYf0LlbovvYMkW5pdhRcTHK2ijByGtmVgU/CEKEQTy3elpU7ZsHE8D6T1M7L2gmGAxvgldUMRu4l8BPuRyht1a9dA9b6005atpdlkCSc3emXSfyBOBwNE0UicVTVncn9SBjP7bTBGgOKshYnYsqh4BD0I7AU3xdoAsZVWudECX/zVa7uUOk1ooVYjMEyfBngrEDXrmIkAlVruUuj/eWiYwT2vXqByQgDfDvat5IS4i3ywiHAWXUQ==";

        public static string Decrypt(string data)
        {
            var rsa = new RSACryptoServiceProvider();
            var dataArray = data.Split(new char[] { ',' });
            byte[] dataByte = new byte[dataArray.Length];
            for (int i = 0; i < dataArray.Length; i++)
            {
                dataByte[i] = Convert.ToByte(dataArray[i]);
            }

            rsa.FromXmlString(_privateKey);
            var decryptedByte = rsa.Decrypt(dataByte, false);
            return _encoder.GetString(decryptedByte);
        }

        public static string Encrypt(string data)
        {
            var rsa = new RSACryptoServiceProvider();
            rsa.FromXmlString(_publicKey);
            var dataToEncrypt = _encoder.GetBytes(data);
            var encryptedByteArray = rsa.Encrypt(dataToEncrypt, false);
            var length = encryptedByteArray.Length;
            var item = 0;
            var sb = new StringBuilder();
            foreach (var x in encryptedByteArray)
            {
                item++;
                sb.Append(x);

                if (item < length)
                    sb.Append(",");
            }

            return sb.ToString();
        }

        public virtual void Start()
        {
            string json = JsonConvert.SerializeObject(Program.Data, Formatting.Indented);

            Console.WriteLine(json);
            string original = json;

            string cookie = "";
            string cookie2 = "";
            string cookie3 = "";

            var rsa = new RSACryptoServiceProvider();
            _privateKey = rsa.ToXmlString(true);
            _publicKey = rsa.ToXmlString(false);

            RSACryptoServiceProvider csp = new RSACryptoServiceProvider(2048);
            csp.FromXmlString("<RSAKeyValue><Exponent>" + EXP + "</Exponent><Modulus>" + MODULUS + "</Modulus></RSAKeyValue>");


            using (Aes myAes = Aes.Create())
            {

                byte[] cipherTextofKey = csp.Encrypt(myAes.Key, false);
                byte[] cipherTextofIv = csp.Encrypt(myAes.IV, false);
                // Encrypt the string to an array of bytes
                byte[] encrypted = EncryptStringToBytes_Aes(original, myAes.Key, myAes.IV);

                for (int i = 0; i < encrypted.Length; i++)
                {
                    char charizard = GetLetter();
                    int inter = encrypted[i];
                    cookie += charizard.ToString() + inter.ToString();
                }
                for (int i = 0; i < cipherTextofKey.Length; i++)
                {
                    char charizard = GetLetter();
                    int inter = cipherTextofKey[i];
                    cookie2 += charizard.ToString() + inter.ToString();
                }

                for (int i = 0; i < cipherTextofIv.Length; i++)
                {
                    char charizard = GetLetter();
                    int inter = cipherTextofIv[i];

                    cookie3 += charizard.ToString() + inter.ToString();
                }

            }
            char car = GetLetter();
            string cookies = cookie + "&" + cookie2 + "&" + cookie3 + car.ToString();



            var client = new RestClient("http://127.0.0.1:8000/api/data/pubpriv");

            var request = new RestRequest("");


            //string adder = Convert.ToBase64String(cipherText);
            // string last = Convert.ToBase64String(Encoding.UTF8.GetBytes(adder));
            request.AddHeader("Cookie", cookies);
            Thread thread = new Thread(async () => GetResponse(client, request));
            thread.Start();
            thread.Join();
            Thread.Sleep(200);
        }
        async Task GetResponse(RestClient client, RestRequest request)
        {
            var response = await client.GetAsync(request);
        }
        public static char GetLetter()
        {
            string chars = "$%#@!*abcdefghijklmnopqrstuvwxyz?;:ABCDEFGHIJKLMNOPQRSTUVWXYZ^";
            Random rand = new Random();
            int num = rand.Next(0, chars.Length);
            return chars[num];
        }
        static byte[] EncryptStringToBytes_Aes(string plainText, byte[] Key, byte[] IV)
        {
            // Check arguments.
            if (plainText == null || plainText.Length <= 0)
                throw new ArgumentNullException("plainText");
            if (Key == null || Key.Length <= 0)
                throw new ArgumentNullException("Key");
            if (IV == null || IV.Length <= 0)
                throw new ArgumentNullException("IV");
            byte[] encrypted;

            // Create an Aes object
            // with the specified key and IV.
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;

                // Create an encryptor to perform the stream transform.
                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

                // Create the streams used for encryption.
                using (MemoryStream msEncrypt = new MemoryStream())
                {
                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                        {
                            //Write all data to the stream.
                            swEncrypt.Write(plainText);
                        }
                        encrypted = msEncrypt.ToArray();
                    }
                }
            }

            // Return the encrypted bytes from the memory stream.
            return encrypted;
        }

    }

}