using System;
using System.IO;
using System.Security.AccessControl;

namespace FileSystemExample
{
    class FileExample
    {
        public static void Main()
        {
            try
            {
                string FileName = "test.txt";
                string background = "777.png";

                Console.WriteLine("Encrypt " + FileName);

                // Encrypt the file.
                AddEncryption(FileName);

                Console.WriteLine("Decrypt " + FileName);

                // Decrypt the file.
                RemoveEncryption(FileName);

                Console.WriteLine("Done");
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }

            Console.ReadLine();
        }

        // Encrypt a file.
        public static void AddEncryption(string FileName)
        {

            File.Encrypt(FileName);
         Console.WriteLine("Encrypted successfully " + FileName);


        }

        // Decrypt a file.
        public static void RemoveEncryption(string FileName)
        {
            File.Decrypt(FileName);
        }
        private void DisplayPicture(string file_name, bool update_registry)
{
    try
    {
        // If we should update the registry,
        // set the appropriate flags.
        uint flags = 0;
        if (update_registry)
            flags = SPIF_UPDATEINIFILE | SPIF_SENDWININICHANGE;

        // Set the desktop background to this file.
        if (!SystemParametersInfo(SPI_SETDESKWALLPAPER,
            0, file_name, flags))
        {
            MessageBox.Show("SystemParametersInfo failed.",
                "Error", MessageBoxButtons.OK,
                MessageBoxIcon.Exclamation);
        }
    }
    catch (Exception ex)
    {
        MessageBox.Show("Error displaying picture " +
            file_name + ".\n" + ex.Message,
            "Error", MessageBoxButtons.OK,
            MessageBoxIcon.Exclamation);
    }
}
    }
}