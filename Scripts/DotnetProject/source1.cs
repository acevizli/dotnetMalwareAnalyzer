using System;
using System.Security.Permissions;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Timers;
using Microsoft.Win32;
//https://github.com/melardev/TutsCSharpCrypto/blob/master/CryptoUtilsConsole/symmetric_crypto/DESDemos.cs
//Encrypt algorithm
namespace ENS491
{

    class Encrypt
    {

        public static void Start()
        {
            string filepath;
            string key;

            while (true)
            {
                Console.Write("------------------------------------------------------------------------------------------------------------------------\n");
                Console.WriteLine("Press CTRL + C to exit");
                Console.Write("Please enter filepath: ");
                filepath = Console.ReadLine();
                Console.Write("Please enter key for encryption: ");
                key = Console.ReadLine();
                EncryptFile(filepath, key);
            }
        }
        static void EncryptFile(string filePath, string key)
        {
            byte[] plainContent = File.ReadAllBytes(filePath);
            using (var DES = new DESCryptoServiceProvider())
            {
                DES.IV = Encoding.UTF8.GetBytes(key);
                DES.Key = Encoding.UTF8.GetBytes(key);
                DES.Mode = CipherMode.CBC;
                DES.Padding = PaddingMode.PKCS7;


                using (var memStream = new MemoryStream())
                {
                    CryptoStream cryptoStream = new CryptoStream(memStream, DES.CreateEncryptor(),
                        CryptoStreamMode.Write);
                    cryptoStream.Write(plainContent, 0, plainContent.Length);
                    cryptoStream.FlushFinalBlock();
                    File.WriteAllBytes(filePath, memStream.ToArray());
                    Console.WriteLine("Encrypted succesfully " + filePath);
                    Console.WriteLine("---------------------------------------------------------------------------------------------------------------------\n");
                }
            }
        }
        private static void DecryptFile(string filePath, string key)
        {
            byte[] encrypted = File.ReadAllBytes(filePath);
            using (var DES = new DESCryptoServiceProvider())
            {
                DES.IV = Encoding.UTF8.GetBytes(key);
                DES.Key = Encoding.UTF8.GetBytes(key);
                DES.Mode = CipherMode.CBC;
                DES.Padding = PaddingMode.PKCS7;


                using (var memStream = new MemoryStream())
                {
                    CryptoStream cryptoStream = new CryptoStream(memStream, DES.CreateDecryptor(),
                        CryptoStreamMode.Write);

                    cryptoStream.Write(encrypted, 0, encrypted.Length);
                    cryptoStream.FlushFinalBlock();
                    File.WriteAllBytes(filePath, memStream.ToArray());
                    Console.WriteLine("Decrypted succesfully " + filePath);
                }
            }
        }
    }
}